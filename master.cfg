# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process import properties
from generate_builders import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("worker1", "XXX INSERT PASSWORD HERE")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/netbsd/src',
        workdir='poller-workdir', branches=True,
        pollinterval=300, pollAtLaunch=True))

all_repositories = {
    r'https://github.com/netbsd/src': 'src',
    r'https://github.com/netbsd/xsrc': 'xsrc',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

head_builders_and_names = generate_head_builders()
head_builders = [i[0] for i in head_builders_and_names]
head_builder_names = [i[1] for i in head_builders_and_names]

netbsd_8_builders_and_names = generate_netbsd_8_builders()
netbsd_8_builders = [i[0] for i in netbsd_8_builders_and_names]
netbsd_8_builder_names = [i[1] for i in netbsd_8_builders_and_names]

netbsd_9_builders_and_names = generate_netbsd_9_builders()
netbsd_9_builders = [i[0] for i in netbsd_9_builders_and_names]
netbsd_9_builder_names = [i[1] for i in netbsd_9_builders_and_names]

release_builders_and_names = generate_release_builders()
release_builders = [i[0] for i in release_builders_and_names]
release_builder_names = [i[1] for i in release_builders_and_names]

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="Trunk commits",
                            codebases= [
                                'src',
                                'xsrc'
                            ],
                            branch='trunk',
                            treeStableTimer=None,
                            builderNames=head_builder_names))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="netbsd-9 commits",
                            codebases= [
                                'src',
                                'xsrc'
                            ],
                            branch='netbsd-9',
                            treeStableTimer=None,
                            builderNames=netbsd_9_builder_names))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="netbsd-8 commits",
                            codebases= [
                                'src',
                                'xsrc'
                            ],
                            branch='netbsd-8',
                            treeStableTimer=None,
                            builderNames=netbsd_8_builder_names))

# Every build can be forced.
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            codebases= [
                                'src',
                                'xsrc'
                            ],
                            builderNames=head_builder_names + netbsd_8_builder_names + netbsd_9_builder_names + release_builder_names))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


c['builders'] = head_builders + netbsd_8_builders + netbsd_9_builders + release_builders

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "NetBSD buildbot"
c['titleURL'] = "http://netbsd.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.xen.prgmr.com:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
